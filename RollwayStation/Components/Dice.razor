@inject Store store;

<div class="container text-center rounded bg-green pt-3 pb-3 mt-2 mb-2">
    <div class="col-12 btn-group mb-1">
        @if (dice != null && diceInitialized)
        {
            foreach (var die in dice.OrderBy(x => x.Face))
            {

                <button @onclick="@(()=> SetAllocation(die))"
                        class="btn bg-cream @(die.Used ? "disabled" : "")"
                        style="font-size: calc(100% + 1vw + 1vh);">
                    @((MarkupString)$"&#{(9855 + die.Face).ToString()}")
                    @if (die.Used)
                    {
                        <i class="fas @(GetIconClass(die))"></i>
                    }
                </button>

            }
        }
    </div>
    <div class="col-sm-12 col-md-6 mx-auto text-center">
        <button class="btn btn-block bg-charcoal text-light" disabled="@(diceInitialized && anyUnusedDice)" @onclick="RollDice">Roll Dice</button>
    </div>
</div>
@code {
    [Parameter]
    public AllocationType AllocationType { get; set; }
    [Parameter]
    public int MaxAllocations { get; set; }
    [Parameter]
    public EventCallback<Die> OnAllocatedEventHandler { get; set; }

    private List<Die> dice;
    private bool anyUnusedDice => dice.Any(x => !x.Used);
    private bool diceInitialized => !dice.Any(x => x.Face <= 0);
    private int currentAllocations;
    private bool anyAllocationsRemaining => currentAllocations < MaxAllocations;
    private readonly Dictionary<AllocationType, string> allocationIconMap = new Dictionary<AllocationType, string>
{
        { AllocationType.Share, "fa-percentage" },
        { AllocationType.Track, "fa-project-diagram" },
        { AllocationType.Bid, "fa-hand-holding-usd" },
    };

    protected override void OnInitialized()
    {
        dice = store.Dice;
    }

    string GetIconClass(Die die)
    {
        return die.AllocatedTo.HasValue
            && allocationIconMap.TryGetValue(die.AllocatedTo.Value, out var iconClass)
            ? iconClass
            : string.Empty;
    }

    void RollDice()
    {

        foreach (var die in dice)
        {
            die.Roll();
            die.AllocatedTo = null;
        }

        StateHasChanged();
    }

    void SetAllocation(Die die)
    {
        if (!anyAllocationsRemaining && die.AllocatedTo != AllocationType) 
        {
            return;
        }

        if (die.AllocatedTo == AllocationType)
        {
            die.AllocatedTo = null;
            currentAllocations--;
        }
        else if (die.AllocatedTo == null && currentAllocations < MaxAllocations)
        {
            die.AllocatedTo = AllocationType;
            currentAllocations++;
        }
        OnAllocatedEventHandler.InvokeAsync(die);
        StateHasChanged();
    }
}
