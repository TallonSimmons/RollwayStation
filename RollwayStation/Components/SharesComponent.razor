@inject SharesService sharesService;
@inject Store store;

<DiceComponent AllocationType="AllocationType.Share"
      MaxAllocations="2"
      OnAllocatedEventHandler="OnDieAllocated"></DiceComponent>
<div class="bg-green rounded col-xs-12 col-md-6 mx-auto p-3">
    <h2 class="mb-2 text-light">Shares</h2>
    <SquareRailSharesComponent @ref="squareRailSharesComponent"></SquareRailSharesComponent>
    <CircleLineSharesComponent @ref="circleLineSharesComponent"></CircleLineSharesComponent>
    <PentagonExpressSharesComponent @ref="pentagonExpressSharesComponent"></PentagonExpressSharesComponent>
    @if (availableShares.Any())
    {
        <h4 class="mt-2">Purchase Options</h4>
        <div class="btn-group mx-auto mt-2">
            @foreach (var availableShare in availableShares)
            {
                <button class="btn bg-cream" @onclick="() => BuyShare(availableShare)">
                    @availableShare.CompanyType.CompanyAcronym()
                </button>
            }
        </div>
    }
    else if (BothDiceAllocated && !availableShares.Any() && store.CurrentRound.Share == null)
    {
        <h4 class="mt-2">Burn a Share</h4>
        <div class="btn-group">
            <button class="btn bg-cream" @onclick="() => BurnShare(CompanyType.SquareRail)">SR</button>
            <button class="btn bg-cream" @onclick="() => BurnShare(CompanyType.CircleLine)">CL</button>
            <button class="btn bg-cream" @onclick="() => BurnShare(CompanyType.PentagonExpress)">PE</button>
        </div>
    }
</div>

@code {
    private SquareRailSharesComponent squareRailSharesComponent;
    private CircleLineSharesComponent circleLineSharesComponent;
    private PentagonExpressSharesComponent pentagonExpressSharesComponent;
    private List<Share> availableShares = new List<Share>();
    private bool BothDiceAllocated => store.CurrentRound?.ShareDieOne != null && store.CurrentRound?.ShareDieTwo != null;

    void OnDieAllocated(Die die)
    {
        var deallocatedDie = false;
        if (die.Id == store.CurrentRound.ShareDieOne?.Id)
        {
            store.CurrentRound.ShareDieOne = null;
            deallocatedDie = true;
        }
        else if (die.Id == store.CurrentRound.ShareDieTwo?.Id)
        {
            store.CurrentRound.ShareDieTwo = null;
            deallocatedDie = true;
        }
        else if (store.CurrentRound.ShareDieOne == null)
        {
            store.CurrentRound.ShareDieOne = die.Copy();
        }
        else
        {
            store.CurrentRound.ShareDieTwo = die.Copy();
        }

        if (deallocatedDie && store.CurrentRound.Share != null)
        {
            sharesService.ReturnShare();
        }

        if (store.CurrentRound.ShareDieOne != null && store.CurrentRound.ShareDieTwo != null)
        {
            availableShares = sharesService.GetShareOptions(store.CurrentRound.ShareDieOne, store.CurrentRound.ShareDieTwo);
        }
        else
        {
            availableShares = new List<Share>();
        }

        StateHasChanged();
        RefreshChildren();
    }

    void BuyShare(Share share)
    {
        sharesService.BuyShare(share);
        availableShares.RemoveAll(x => x != null);
        StateHasChanged();
        RefreshChildren();
    }

    void BurnShare(CompanyType companyType)
    {
        sharesService.BurnShare(companyType);
        StateHasChanged();
        RefreshChildren();
    }

    void RefreshChildren()
    {
        // TODO: Get rid of these manual refresh calls.
        squareRailSharesComponent.Refresh();
        circleLineSharesComponent.Refresh();
        pentagonExpressSharesComponent.Refresh();
    }
}
